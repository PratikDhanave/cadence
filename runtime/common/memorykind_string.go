// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindCapabilityValue-12]
	_ = x[MemoryKindStorageReferenceValue-13]
	_ = x[MemoryKindEphemeralReferenceValue-14]
	_ = x[MemoryKindInterpretedFunctionValue-15]
	_ = x[MemoryKindHostFunctionValue-16]
	_ = x[MemoryKindBoundFunctionValue-17]
	_ = x[MemoryKindBigInt-18]
	_ = x[MemoryKindSimpleCompositeValue-19]
	_ = x[MemoryKindPublishedValue-20]
	_ = x[MemoryKindStorageCapabilityControllerValue-21]
	_ = x[MemoryKindAccountCapabilityControllerValue-22]
	_ = x[MemoryKindAtreeArrayDataSlab-23]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-24]
	_ = x[MemoryKindAtreeArrayElementOverhead-25]
	_ = x[MemoryKindAtreeMapDataSlab-26]
	_ = x[MemoryKindAtreeMapMetaDataSlab-27]
	_ = x[MemoryKindAtreeMapElementOverhead-28]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-29]
	_ = x[MemoryKindAtreeEncodedSlab-30]
	_ = x[MemoryKindPrimitiveStaticType-31]
	_ = x[MemoryKindCompositeStaticType-32]
	_ = x[MemoryKindInterfaceStaticType-33]
	_ = x[MemoryKindVariableSizedStaticType-34]
	_ = x[MemoryKindConstantSizedStaticType-35]
	_ = x[MemoryKindDictionaryStaticType-36]
	_ = x[MemoryKindOptionalStaticType-37]
	_ = x[MemoryKindIntersectionStaticType-38]
	_ = x[MemoryKindEntitlementSetStaticAccess-39]
	_ = x[MemoryKindEntitlementMapStaticAccess-40]
	_ = x[MemoryKindReferenceStaticType-41]
	_ = x[MemoryKindCapabilityStaticType-42]
	_ = x[MemoryKindFunctionStaticType-43]
	_ = x[MemoryKindCadenceVoidValue-44]
	_ = x[MemoryKindCadenceOptionalValue-45]
	_ = x[MemoryKindCadenceBoolValue-46]
	_ = x[MemoryKindCadenceStringValue-47]
	_ = x[MemoryKindCadenceCharacterValue-48]
	_ = x[MemoryKindCadenceAddressValue-49]
	_ = x[MemoryKindCadenceIntValue-50]
	_ = x[MemoryKindCadenceNumberValue-51]
	_ = x[MemoryKindCadenceArrayValueBase-52]
	_ = x[MemoryKindCadenceArrayValueLength-53]
	_ = x[MemoryKindCadenceDictionaryValue-54]
	_ = x[MemoryKindCadenceKeyValuePair-55]
	_ = x[MemoryKindCadenceStructValueBase-56]
	_ = x[MemoryKindCadenceStructValueSize-57]
	_ = x[MemoryKindCadenceResourceValueBase-58]
	_ = x[MemoryKindCadenceAttachmentValueBase-59]
	_ = x[MemoryKindCadenceResourceValueSize-60]
	_ = x[MemoryKindCadenceAttachmentValueSize-61]
	_ = x[MemoryKindCadenceEventValueBase-62]
	_ = x[MemoryKindCadenceEventValueSize-63]
	_ = x[MemoryKindCadenceContractValueBase-64]
	_ = x[MemoryKindCadenceContractValueSize-65]
	_ = x[MemoryKindCadenceEnumValueBase-66]
	_ = x[MemoryKindCadenceEnumValueSize-67]
	_ = x[MemoryKindCadencePathValue-68]
	_ = x[MemoryKindCadenceTypeValue-69]
	_ = x[MemoryKindCadenceCapabilityValue-70]
	_ = x[MemoryKindCadenceFunctionValue-71]
	_ = x[MemoryKindCadenceOptionalType-72]
	_ = x[MemoryKindCadenceVariableSizedArrayType-73]
	_ = x[MemoryKindCadenceConstantSizedArrayType-74]
	_ = x[MemoryKindCadenceDictionaryType-75]
	_ = x[MemoryKindCadenceField-76]
	_ = x[MemoryKindCadenceParameter-77]
	_ = x[MemoryKindCadenceTypeParameter-78]
	_ = x[MemoryKindCadenceStructType-79]
	_ = x[MemoryKindCadenceResourceType-80]
	_ = x[MemoryKindCadenceAttachmentType-81]
	_ = x[MemoryKindCadenceEventType-82]
	_ = x[MemoryKindCadenceContractType-83]
	_ = x[MemoryKindCadenceStructInterfaceType-84]
	_ = x[MemoryKindCadenceResourceInterfaceType-85]
	_ = x[MemoryKindCadenceContractInterfaceType-86]
	_ = x[MemoryKindCadenceFunctionType-87]
	_ = x[MemoryKindCadenceEntitlementSetAccess-88]
	_ = x[MemoryKindCadenceEntitlementMapAccess-89]
	_ = x[MemoryKindCadenceReferenceType-90]
	_ = x[MemoryKindCadenceIntersectionType-91]
	_ = x[MemoryKindCadenceCapabilityType-92]
	_ = x[MemoryKindCadenceEnumType-93]
	_ = x[MemoryKindRawString-94]
	_ = x[MemoryKindAddressLocation-95]
	_ = x[MemoryKindBytes-96]
	_ = x[MemoryKindVariable-97]
	_ = x[MemoryKindCompositeTypeInfo-98]
	_ = x[MemoryKindCompositeField-99]
	_ = x[MemoryKindInvocation-100]
	_ = x[MemoryKindStorageMap-101]
	_ = x[MemoryKindStorageKey-102]
	_ = x[MemoryKindTypeToken-103]
	_ = x[MemoryKindErrorToken-104]
	_ = x[MemoryKindSpaceToken-105]
	_ = x[MemoryKindProgram-106]
	_ = x[MemoryKindIdentifier-107]
	_ = x[MemoryKindArgument-108]
	_ = x[MemoryKindBlock-109]
	_ = x[MemoryKindFunctionBlock-110]
	_ = x[MemoryKindParameter-111]
	_ = x[MemoryKindParameterList-112]
	_ = x[MemoryKindTypeParameter-113]
	_ = x[MemoryKindTypeParameterList-114]
	_ = x[MemoryKindTransfer-115]
	_ = x[MemoryKindMembers-116]
	_ = x[MemoryKindTypeAnnotation-117]
	_ = x[MemoryKindDictionaryEntry-118]
	_ = x[MemoryKindFunctionDeclaration-119]
	_ = x[MemoryKindCompositeDeclaration-120]
	_ = x[MemoryKindAttachmentDeclaration-121]
	_ = x[MemoryKindInterfaceDeclaration-122]
	_ = x[MemoryKindEntitlementDeclaration-123]
	_ = x[MemoryKindEntitlementMappingElement-124]
	_ = x[MemoryKindEntitlementMappingDeclaration-125]
	_ = x[MemoryKindEnumCaseDeclaration-126]
	_ = x[MemoryKindFieldDeclaration-127]
	_ = x[MemoryKindTransactionDeclaration-128]
	_ = x[MemoryKindImportDeclaration-129]
	_ = x[MemoryKindVariableDeclaration-130]
	_ = x[MemoryKindSpecialFunctionDeclaration-131]
	_ = x[MemoryKindPragmaDeclaration-132]
	_ = x[MemoryKindAssignmentStatement-133]
	_ = x[MemoryKindBreakStatement-134]
	_ = x[MemoryKindContinueStatement-135]
	_ = x[MemoryKindEmitStatement-136]
	_ = x[MemoryKindExpressionStatement-137]
	_ = x[MemoryKindForStatement-138]
	_ = x[MemoryKindIfStatement-139]
	_ = x[MemoryKindReturnStatement-140]
	_ = x[MemoryKindSwapStatement-141]
	_ = x[MemoryKindSwitchStatement-142]
	_ = x[MemoryKindWhileStatement-143]
	_ = x[MemoryKindRemoveStatement-144]
	_ = x[MemoryKindBooleanExpression-145]
	_ = x[MemoryKindVoidExpression-146]
	_ = x[MemoryKindNilExpression-147]
	_ = x[MemoryKindStringExpression-148]
	_ = x[MemoryKindIntegerExpression-149]
	_ = x[MemoryKindFixedPointExpression-150]
	_ = x[MemoryKindArrayExpression-151]
	_ = x[MemoryKindDictionaryExpression-152]
	_ = x[MemoryKindIdentifierExpression-153]
	_ = x[MemoryKindInvocationExpression-154]
	_ = x[MemoryKindMemberExpression-155]
	_ = x[MemoryKindIndexExpression-156]
	_ = x[MemoryKindConditionalExpression-157]
	_ = x[MemoryKindUnaryExpression-158]
	_ = x[MemoryKindBinaryExpression-159]
	_ = x[MemoryKindFunctionExpression-160]
	_ = x[MemoryKindCastingExpression-161]
	_ = x[MemoryKindCreateExpression-162]
	_ = x[MemoryKindDestroyExpression-163]
	_ = x[MemoryKindReferenceExpression-164]
	_ = x[MemoryKindForceExpression-165]
	_ = x[MemoryKindPathExpression-166]
	_ = x[MemoryKindAttachExpression-167]
	_ = x[MemoryKindConstantSizedType-168]
	_ = x[MemoryKindDictionaryType-169]
	_ = x[MemoryKindFunctionType-170]
	_ = x[MemoryKindInstantiationType-171]
	_ = x[MemoryKindNominalType-172]
	_ = x[MemoryKindOptionalType-173]
	_ = x[MemoryKindReferenceType-174]
	_ = x[MemoryKindIntersectionType-175]
	_ = x[MemoryKindVariableSizedType-176]
	_ = x[MemoryKindPosition-177]
	_ = x[MemoryKindRange-178]
	_ = x[MemoryKindElaboration-179]
	_ = x[MemoryKindActivation-180]
	_ = x[MemoryKindActivationEntries-181]
	_ = x[MemoryKindVariableSizedSemaType-182]
	_ = x[MemoryKindConstantSizedSemaType-183]
	_ = x[MemoryKindDictionarySemaType-184]
	_ = x[MemoryKindOptionalSemaType-185]
	_ = x[MemoryKindIntersectionSemaType-186]
	_ = x[MemoryKindReferenceSemaType-187]
	_ = x[MemoryKindEntitlementSemaType-188]
	_ = x[MemoryKindEntitlementMapSemaType-189]
	_ = x[MemoryKindEntitlementRelationSemaType-190]
	_ = x[MemoryKindCapabilitySemaType-191]
	_ = x[MemoryKindOrderedMap-192]
	_ = x[MemoryKindOrderedMapEntryList-193]
	_ = x[MemoryKindOrderedMapEntry-194]
	_ = x[MemoryKindLast-195]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueCapabilityValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueStorageCapabilityControllerValueAccountCapabilityControllerValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeIntersectionStaticTypeEntitlementSetStaticAccessEntitlementMapStaticAccessReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathValueCadenceTypeValueCadenceCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceTypeParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceEntitlementSetAccessCadenceEntitlementMapAccessCadenceReferenceTypeCadenceIntersectionTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEntitlementDeclarationEntitlementMappingElementEntitlementMappingDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeIntersectionTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeIntersectionSemaTypeReferenceSemaTypeEntitlementSemaTypeEntitlementMapSemaTypeEntitlementRelationSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 176, 197, 220, 244, 261, 279, 285, 305, 319, 351, 383, 401, 423, 448, 464, 484, 507, 534, 550, 569, 588, 607, 630, 653, 673, 691, 713, 739, 765, 784, 804, 822, 838, 858, 874, 892, 913, 932, 947, 965, 986, 1009, 1031, 1050, 1072, 1094, 1118, 1144, 1168, 1194, 1215, 1236, 1260, 1284, 1304, 1324, 1340, 1356, 1378, 1398, 1417, 1446, 1475, 1496, 1508, 1524, 1544, 1561, 1580, 1601, 1617, 1636, 1662, 1690, 1718, 1737, 1764, 1791, 1811, 1834, 1855, 1870, 1879, 1894, 1899, 1907, 1924, 1938, 1948, 1958, 1968, 1977, 1987, 1997, 2004, 2014, 2022, 2027, 2040, 2049, 2062, 2075, 2092, 2100, 2107, 2121, 2136, 2155, 2175, 2196, 2216, 2238, 2263, 2292, 2311, 2327, 2349, 2366, 2385, 2411, 2428, 2447, 2461, 2478, 2491, 2510, 2522, 2533, 2548, 2561, 2576, 2590, 2605, 2622, 2636, 2649, 2665, 2682, 2702, 2717, 2737, 2757, 2777, 2793, 2808, 2829, 2844, 2860, 2878, 2895, 2911, 2928, 2947, 2962, 2976, 2992, 3009, 3023, 3035, 3052, 3063, 3075, 3088, 3104, 3121, 3129, 3134, 3145, 3155, 3172, 3193, 3214, 3232, 3248, 3268, 3285, 3304, 3326, 3353, 3371, 3381, 3400, 3415, 3419}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
