// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBoolValue-1]
	_ = x[MemoryKindAddressValue-2]
	_ = x[MemoryKindStringValue-3]
	_ = x[MemoryKindCharacterValue-4]
	_ = x[MemoryKindNumberValue-5]
	_ = x[MemoryKindArrayValueBase-6]
	_ = x[MemoryKindDictionaryValueBase-7]
	_ = x[MemoryKindCompositeValueBase-8]
	_ = x[MemoryKindSimpleCompositeValueBase-9]
	_ = x[MemoryKindOptionalValue-10]
	_ = x[MemoryKindNilValue-11]
	_ = x[MemoryKindVoidValue-12]
	_ = x[MemoryKindTypeValue-13]
	_ = x[MemoryKindPathValue-14]
	_ = x[MemoryKindCapabilityValue-15]
	_ = x[MemoryKindLinkValue-16]
	_ = x[MemoryKindStorageReferenceValue-17]
	_ = x[MemoryKindEphemeralReferenceValue-18]
	_ = x[MemoryKindInterpretedFunctionValue-19]
	_ = x[MemoryKindHostFunctionValue-20]
	_ = x[MemoryKindBoundFunctionValue-21]
	_ = x[MemoryKindBigInt-22]
	_ = x[MemoryKindSimpleCompositeValue-23]
	_ = x[MemoryKindAtreeArrayDataSlab-24]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-25]
	_ = x[MemoryKindAtreeArrayElementOverhead-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-30]
	_ = x[MemoryKindAtreeEncodedSlab-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindRestrictedStaticType-39]
	_ = x[MemoryKindReferenceStaticType-40]
	_ = x[MemoryKindCapabilityStaticType-41]
	_ = x[MemoryKindFunctionStaticType-42]
	_ = x[MemoryKindCadenceVoidValue-43]
	_ = x[MemoryKindCadenceOptionalValue-44]
	_ = x[MemoryKindCadenceBoolValue-45]
	_ = x[MemoryKindCadenceStringValue-46]
	_ = x[MemoryKindCadenceCharacterValue-47]
	_ = x[MemoryKindCadenceAddressValue-48]
	_ = x[MemoryKindCadenceIntValue-49]
	_ = x[MemoryKindCadenceNumberValue-50]
	_ = x[MemoryKindCadenceArrayValueBase-51]
	_ = x[MemoryKindCadenceArrayValueLength-52]
	_ = x[MemoryKindCadenceDictionaryValue-53]
	_ = x[MemoryKindCadenceKeyValuePair-54]
	_ = x[MemoryKindCadenceStructValueBase-55]
	_ = x[MemoryKindCadenceStructValueSize-56]
	_ = x[MemoryKindCadenceResourceValueBase-57]
	_ = x[MemoryKindCadenceResourceValueSize-58]
	_ = x[MemoryKindCadenceEventValueBase-59]
	_ = x[MemoryKindCadenceEventValueSize-60]
	_ = x[MemoryKindCadenceContractValueBase-61]
	_ = x[MemoryKindCadenceContractValueSize-62]
	_ = x[MemoryKindCadenceEnumValueBase-63]
	_ = x[MemoryKindCadenceEnumValueSize-64]
	_ = x[MemoryKindCadenceLinkValue-65]
	_ = x[MemoryKindCadencePathValue-66]
	_ = x[MemoryKindCadenceTypeValue-67]
	_ = x[MemoryKindCadenceCapabilityValue-68]
	_ = x[MemoryKindCadenceSimpleType-69]
	_ = x[MemoryKindCadenceOptionalType-70]
	_ = x[MemoryKindCadenceVariableSizedArrayType-71]
	_ = x[MemoryKindCadenceConstantSizedArrayType-72]
	_ = x[MemoryKindCadenceDictionaryType-73]
	_ = x[MemoryKindCadenceField-74]
	_ = x[MemoryKindCadenceParameter-75]
	_ = x[MemoryKindCadenceStructType-76]
	_ = x[MemoryKindCadenceResourceType-77]
	_ = x[MemoryKindCadenceEventType-78]
	_ = x[MemoryKindCadenceContractType-79]
	_ = x[MemoryKindCadenceStructInterfaceType-80]
	_ = x[MemoryKindCadenceResourceInterfaceType-81]
	_ = x[MemoryKindCadenceContractInterfaceType-82]
	_ = x[MemoryKindCadenceFunctionType-83]
	_ = x[MemoryKindCadenceReferenceType-84]
	_ = x[MemoryKindCadenceRestrictedType-85]
	_ = x[MemoryKindCadenceCapabilityType-86]
	_ = x[MemoryKindCadenceEnumType-87]
	_ = x[MemoryKindRawString-88]
	_ = x[MemoryKindAddressLocation-89]
	_ = x[MemoryKindBytes-90]
	_ = x[MemoryKindVariable-91]
	_ = x[MemoryKindCompositeTypeInfo-92]
	_ = x[MemoryKindCompositeField-93]
	_ = x[MemoryKindInvocation-94]
	_ = x[MemoryKindStorageMap-95]
	_ = x[MemoryKindStorageKey-96]
	_ = x[MemoryKindTypeToken-97]
	_ = x[MemoryKindErrorToken-98]
	_ = x[MemoryKindSpaceToken-99]
	_ = x[MemoryKindProgram-100]
	_ = x[MemoryKindIdentifier-101]
	_ = x[MemoryKindArgument-102]
	_ = x[MemoryKindBlock-103]
	_ = x[MemoryKindFunctionBlock-104]
	_ = x[MemoryKindParameter-105]
	_ = x[MemoryKindParameterList-106]
	_ = x[MemoryKindTransfer-107]
	_ = x[MemoryKindMembers-108]
	_ = x[MemoryKindTypeAnnotation-109]
	_ = x[MemoryKindDictionaryEntry-110]
	_ = x[MemoryKindFunctionDeclaration-111]
	_ = x[MemoryKindCompositeDeclaration-112]
	_ = x[MemoryKindInterfaceDeclaration-113]
	_ = x[MemoryKindEnumCaseDeclaration-114]
	_ = x[MemoryKindFieldDeclaration-115]
	_ = x[MemoryKindTransactionDeclaration-116]
	_ = x[MemoryKindImportDeclaration-117]
	_ = x[MemoryKindVariableDeclaration-118]
	_ = x[MemoryKindSpecialFunctionDeclaration-119]
	_ = x[MemoryKindPragmaDeclaration-120]
	_ = x[MemoryKindAssignmentStatement-121]
	_ = x[MemoryKindBreakStatement-122]
	_ = x[MemoryKindContinueStatement-123]
	_ = x[MemoryKindEmitStatement-124]
	_ = x[MemoryKindExpressionStatement-125]
	_ = x[MemoryKindForStatement-126]
	_ = x[MemoryKindIfStatement-127]
	_ = x[MemoryKindReturnStatement-128]
	_ = x[MemoryKindSwapStatement-129]
	_ = x[MemoryKindSwitchStatement-130]
	_ = x[MemoryKindWhileStatement-131]
	_ = x[MemoryKindBooleanExpression-132]
	_ = x[MemoryKindNilExpression-133]
	_ = x[MemoryKindStringExpression-134]
	_ = x[MemoryKindIntegerExpression-135]
	_ = x[MemoryKindFixedPointExpression-136]
	_ = x[MemoryKindArrayExpression-137]
	_ = x[MemoryKindDictionaryExpression-138]
	_ = x[MemoryKindIdentifierExpression-139]
	_ = x[MemoryKindInvocationExpression-140]
	_ = x[MemoryKindMemberExpression-141]
	_ = x[MemoryKindIndexExpression-142]
	_ = x[MemoryKindConditionalExpression-143]
	_ = x[MemoryKindUnaryExpression-144]
	_ = x[MemoryKindBinaryExpression-145]
	_ = x[MemoryKindFunctionExpression-146]
	_ = x[MemoryKindCastingExpression-147]
	_ = x[MemoryKindCreateExpression-148]
	_ = x[MemoryKindDestroyExpression-149]
	_ = x[MemoryKindReferenceExpression-150]
	_ = x[MemoryKindForceExpression-151]
	_ = x[MemoryKindPathExpression-152]
	_ = x[MemoryKindConstantSizedType-153]
	_ = x[MemoryKindDictionaryType-154]
	_ = x[MemoryKindFunctionType-155]
	_ = x[MemoryKindInstantiationType-156]
	_ = x[MemoryKindNominalType-157]
	_ = x[MemoryKindOptionalType-158]
	_ = x[MemoryKindReferenceType-159]
	_ = x[MemoryKindRestrictedType-160]
	_ = x[MemoryKindVariableSizedType-161]
	_ = x[MemoryKindPosition-162]
	_ = x[MemoryKindRange-163]
	_ = x[MemoryKindElaboration-164]
	_ = x[MemoryKindActivation-165]
	_ = x[MemoryKindActivationEntries-166]
	_ = x[MemoryKindVariableSizedSemaType-167]
	_ = x[MemoryKindConstantSizedSemaType-168]
	_ = x[MemoryKindDictionarySemaType-169]
	_ = x[MemoryKindOptionalSemaType-170]
	_ = x[MemoryKindRestrictedSemaType-171]
	_ = x[MemoryKindReferenceSemaType-172]
	_ = x[MemoryKindCapabilitySemaType-173]
	_ = x[MemoryKindOrderedMap-174]
	_ = x[MemoryKindOrderedMapEntryList-175]
	_ = x[MemoryKindOrderedMapEntry-176]
	_ = x[MemoryKindLast-177]
}

const _MemoryKind_name = "UnknownBoolValueAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueNilValueVoidValueTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceResourceValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadenceLinkValueCadencePathValueCadenceTypeValueCadenceCapabilityValueCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 16, 28, 39, 53, 64, 78, 97, 115, 139, 152, 160, 169, 178, 187, 202, 211, 232, 255, 279, 296, 314, 320, 340, 358, 380, 405, 421, 441, 464, 491, 507, 526, 545, 564, 587, 610, 630, 648, 668, 687, 707, 725, 741, 761, 777, 795, 816, 835, 850, 868, 889, 912, 934, 953, 975, 997, 1021, 1045, 1066, 1087, 1111, 1135, 1155, 1175, 1191, 1207, 1223, 1245, 1262, 1281, 1310, 1339, 1360, 1372, 1388, 1405, 1424, 1440, 1459, 1485, 1513, 1541, 1560, 1580, 1601, 1622, 1637, 1646, 1661, 1666, 1674, 1691, 1705, 1715, 1725, 1735, 1744, 1754, 1764, 1771, 1781, 1789, 1794, 1807, 1816, 1829, 1837, 1844, 1858, 1873, 1892, 1912, 1932, 1951, 1967, 1989, 2006, 2025, 2051, 2068, 2087, 2101, 2118, 2131, 2150, 2162, 2173, 2188, 2201, 2216, 2230, 2247, 2260, 2276, 2293, 2313, 2328, 2348, 2368, 2388, 2404, 2419, 2440, 2455, 2471, 2489, 2506, 2522, 2539, 2558, 2573, 2587, 2604, 2618, 2630, 2647, 2658, 2670, 2683, 2697, 2714, 2722, 2727, 2738, 2748, 2765, 2786, 2807, 2825, 2841, 2859, 2876, 2894, 2904, 2923, 2938, 2942}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
