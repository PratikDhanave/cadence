// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindStorageCapabilityValue-12]
	_ = x[MemoryKindPathLinkValue-13]
	_ = x[MemoryKindAccountLinkValue-14]
	_ = x[MemoryKindStorageReferenceValue-15]
	_ = x[MemoryKindAccountReferenceValue-16]
	_ = x[MemoryKindEphemeralReferenceValue-17]
	_ = x[MemoryKindInterpretedFunctionValue-18]
	_ = x[MemoryKindHostFunctionValue-19]
	_ = x[MemoryKindBoundFunctionValue-20]
	_ = x[MemoryKindBigInt-21]
	_ = x[MemoryKindSimpleCompositeValue-22]
	_ = x[MemoryKindPublishedValue-23]
	_ = x[MemoryKindCapabilityControllerValue-24]
	_ = x[MemoryKindAtreeArrayDataSlab-25]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-26]
	_ = x[MemoryKindAtreeArrayElementOverhead-27]
	_ = x[MemoryKindAtreeMapDataSlab-28]
	_ = x[MemoryKindAtreeMapMetaDataSlab-29]
	_ = x[MemoryKindAtreeMapElementOverhead-30]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-31]
	_ = x[MemoryKindAtreeEncodedSlab-32]
	_ = x[MemoryKindPrimitiveStaticType-33]
	_ = x[MemoryKindCompositeStaticType-34]
	_ = x[MemoryKindInterfaceStaticType-35]
	_ = x[MemoryKindVariableSizedStaticType-36]
	_ = x[MemoryKindConstantSizedStaticType-37]
	_ = x[MemoryKindDictionaryStaticType-38]
	_ = x[MemoryKindOptionalStaticType-39]
	_ = x[MemoryKindRestrictedStaticType-40]
	_ = x[MemoryKindReferenceStaticType-41]
	_ = x[MemoryKindCapabilityStaticType-42]
	_ = x[MemoryKindFunctionStaticType-43]
	_ = x[MemoryKindCapabilityControllerStaticType-44]
	_ = x[MemoryKindCadenceVoidValue-45]
	_ = x[MemoryKindCadenceOptionalValue-46]
	_ = x[MemoryKindCadenceBoolValue-47]
	_ = x[MemoryKindCadenceStringValue-48]
	_ = x[MemoryKindCadenceCharacterValue-49]
	_ = x[MemoryKindCadenceAddressValue-50]
	_ = x[MemoryKindCadenceIntValue-51]
	_ = x[MemoryKindCadenceNumberValue-52]
	_ = x[MemoryKindCadenceArrayValueBase-53]
	_ = x[MemoryKindCadenceArrayValueLength-54]
	_ = x[MemoryKindCadenceDictionaryValue-55]
	_ = x[MemoryKindCadenceKeyValuePair-56]
	_ = x[MemoryKindCadenceStructValueBase-57]
	_ = x[MemoryKindCadenceStructValueSize-58]
	_ = x[MemoryKindCadenceResourceValueBase-59]
	_ = x[MemoryKindCadenceResourceValueSize-60]
	_ = x[MemoryKindCadenceEventValueBase-61]
	_ = x[MemoryKindCadenceEventValueSize-62]
	_ = x[MemoryKindCadenceContractValueBase-63]
	_ = x[MemoryKindCadenceContractValueSize-64]
	_ = x[MemoryKindCadenceEnumValueBase-65]
	_ = x[MemoryKindCadenceEnumValueSize-66]
	_ = x[MemoryKindCadencePathLinkValue-67]
	_ = x[MemoryKindCadencePathValue-68]
	_ = x[MemoryKindCadenceTypeValue-69]
	_ = x[MemoryKindCadenceStorageCapabilityValue-70]
	_ = x[MemoryKindCadenceFunctionValue-71]
	_ = x[MemoryKindCadenceSimpleType-72]
	_ = x[MemoryKindCadenceOptionalType-73]
	_ = x[MemoryKindCadenceVariableSizedArrayType-74]
	_ = x[MemoryKindCadenceConstantSizedArrayType-75]
	_ = x[MemoryKindCadenceDictionaryType-76]
	_ = x[MemoryKindCadenceField-77]
	_ = x[MemoryKindCadenceParameter-78]
	_ = x[MemoryKindCadenceStructType-79]
	_ = x[MemoryKindCadenceResourceType-80]
	_ = x[MemoryKindCadenceEventType-81]
	_ = x[MemoryKindCadenceContractType-82]
	_ = x[MemoryKindCadenceStructInterfaceType-83]
	_ = x[MemoryKindCadenceResourceInterfaceType-84]
	_ = x[MemoryKindCadenceContractInterfaceType-85]
	_ = x[MemoryKindCadenceFunctionType-86]
	_ = x[MemoryKindCadenceReferenceType-87]
	_ = x[MemoryKindCadenceRestrictedType-88]
	_ = x[MemoryKindCadenceCapabilityType-89]
	_ = x[MemoryKindCadenceEnumType-90]
	_ = x[MemoryKindRawString-91]
	_ = x[MemoryKindAddressLocation-92]
	_ = x[MemoryKindBytes-93]
	_ = x[MemoryKindVariable-94]
	_ = x[MemoryKindCompositeTypeInfo-95]
	_ = x[MemoryKindCompositeField-96]
	_ = x[MemoryKindInvocation-97]
	_ = x[MemoryKindStorageMap-98]
	_ = x[MemoryKindStorageKey-99]
	_ = x[MemoryKindTypeToken-100]
	_ = x[MemoryKindErrorToken-101]
	_ = x[MemoryKindSpaceToken-102]
	_ = x[MemoryKindProgram-103]
	_ = x[MemoryKindIdentifier-104]
	_ = x[MemoryKindArgument-105]
	_ = x[MemoryKindBlock-106]
	_ = x[MemoryKindFunctionBlock-107]
	_ = x[MemoryKindParameter-108]
	_ = x[MemoryKindParameterList-109]
	_ = x[MemoryKindTransfer-110]
	_ = x[MemoryKindMembers-111]
	_ = x[MemoryKindTypeAnnotation-112]
	_ = x[MemoryKindDictionaryEntry-113]
	_ = x[MemoryKindFunctionDeclaration-114]
	_ = x[MemoryKindCompositeDeclaration-115]
	_ = x[MemoryKindInterfaceDeclaration-116]
	_ = x[MemoryKindEnumCaseDeclaration-117]
	_ = x[MemoryKindFieldDeclaration-118]
	_ = x[MemoryKindTransactionDeclaration-119]
	_ = x[MemoryKindImportDeclaration-120]
	_ = x[MemoryKindVariableDeclaration-121]
	_ = x[MemoryKindSpecialFunctionDeclaration-122]
	_ = x[MemoryKindPragmaDeclaration-123]
	_ = x[MemoryKindAssignmentStatement-124]
	_ = x[MemoryKindBreakStatement-125]
	_ = x[MemoryKindContinueStatement-126]
	_ = x[MemoryKindEmitStatement-127]
	_ = x[MemoryKindExpressionStatement-128]
	_ = x[MemoryKindForStatement-129]
	_ = x[MemoryKindIfStatement-130]
	_ = x[MemoryKindReturnStatement-131]
	_ = x[MemoryKindSwapStatement-132]
	_ = x[MemoryKindSwitchStatement-133]
	_ = x[MemoryKindWhileStatement-134]
	_ = x[MemoryKindBooleanExpression-135]
	_ = x[MemoryKindVoidExpression-136]
	_ = x[MemoryKindNilExpression-137]
	_ = x[MemoryKindStringExpression-138]
	_ = x[MemoryKindIntegerExpression-139]
	_ = x[MemoryKindFixedPointExpression-140]
	_ = x[MemoryKindArrayExpression-141]
	_ = x[MemoryKindDictionaryExpression-142]
	_ = x[MemoryKindIdentifierExpression-143]
	_ = x[MemoryKindInvocationExpression-144]
	_ = x[MemoryKindMemberExpression-145]
	_ = x[MemoryKindIndexExpression-146]
	_ = x[MemoryKindConditionalExpression-147]
	_ = x[MemoryKindUnaryExpression-148]
	_ = x[MemoryKindBinaryExpression-149]
	_ = x[MemoryKindFunctionExpression-150]
	_ = x[MemoryKindCastingExpression-151]
	_ = x[MemoryKindCreateExpression-152]
	_ = x[MemoryKindDestroyExpression-153]
	_ = x[MemoryKindReferenceExpression-154]
	_ = x[MemoryKindForceExpression-155]
	_ = x[MemoryKindPathExpression-156]
	_ = x[MemoryKindConstantSizedType-157]
	_ = x[MemoryKindDictionaryType-158]
	_ = x[MemoryKindFunctionType-159]
	_ = x[MemoryKindInstantiationType-160]
	_ = x[MemoryKindNominalType-161]
	_ = x[MemoryKindOptionalType-162]
	_ = x[MemoryKindReferenceType-163]
	_ = x[MemoryKindRestrictedType-164]
	_ = x[MemoryKindVariableSizedType-165]
	_ = x[MemoryKindPosition-166]
	_ = x[MemoryKindRange-167]
	_ = x[MemoryKindElaboration-168]
	_ = x[MemoryKindActivation-169]
	_ = x[MemoryKindActivationEntries-170]
	_ = x[MemoryKindVariableSizedSemaType-171]
	_ = x[MemoryKindConstantSizedSemaType-172]
	_ = x[MemoryKindDictionarySemaType-173]
	_ = x[MemoryKindOptionalSemaType-174]
	_ = x[MemoryKindRestrictedSemaType-175]
	_ = x[MemoryKindReferenceSemaType-176]
	_ = x[MemoryKindCapabilitySemaType-177]
	_ = x[MemoryKindCapabilityControllerSemaType-178]
	_ = x[MemoryKindOrderedMap-179]
	_ = x[MemoryKindOrderedMapEntryList-180]
	_ = x[MemoryKindOrderedMapEntry-181]
	_ = x[MemoryKindLast-182]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueStorageCapabilityValuePathLinkValueAccountLinkValueStorageReferenceValueAccountReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueCapabilityControllerValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCapabilityControllerStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceResourceValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathLinkValueCadencePathValueCadenceTypeValueCadenceStorageCapabilityValueCadenceFunctionValueCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeCapabilityControllerSemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 183, 196, 212, 233, 254, 277, 301, 318, 336, 342, 362, 376, 401, 419, 441, 466, 482, 502, 525, 552, 568, 587, 606, 625, 648, 671, 691, 709, 729, 748, 768, 786, 816, 832, 852, 868, 886, 907, 926, 941, 959, 980, 1003, 1025, 1044, 1066, 1088, 1112, 1136, 1157, 1178, 1202, 1226, 1246, 1266, 1286, 1302, 1318, 1347, 1367, 1384, 1403, 1432, 1461, 1482, 1494, 1510, 1527, 1546, 1562, 1581, 1607, 1635, 1663, 1682, 1702, 1723, 1744, 1759, 1768, 1783, 1788, 1796, 1813, 1827, 1837, 1847, 1857, 1866, 1876, 1886, 1893, 1903, 1911, 1916, 1929, 1938, 1951, 1959, 1966, 1980, 1995, 2014, 2034, 2054, 2073, 2089, 2111, 2128, 2147, 2173, 2190, 2209, 2223, 2240, 2253, 2272, 2284, 2295, 2310, 2323, 2338, 2352, 2369, 2383, 2396, 2412, 2429, 2449, 2464, 2484, 2504, 2524, 2540, 2555, 2576, 2591, 2607, 2625, 2642, 2658, 2675, 2694, 2709, 2723, 2740, 2754, 2766, 2783, 2794, 2806, 2819, 2833, 2850, 2858, 2863, 2874, 2884, 2901, 2922, 2943, 2961, 2977, 2995, 3012, 3030, 3058, 3068, 3087, 3102, 3106}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
