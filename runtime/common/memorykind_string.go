// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindStorageCapabilityValue-12]
	_ = x[MemoryKindPathLinkValue-13]
	_ = x[MemoryKindAccountLinkValue-14]
	_ = x[MemoryKindStorageReferenceValue-15]
	_ = x[MemoryKindAccountReferenceValue-16]
	_ = x[MemoryKindEphemeralReferenceValue-17]
	_ = x[MemoryKindInterpretedFunctionValue-18]
	_ = x[MemoryKindHostFunctionValue-19]
	_ = x[MemoryKindBoundFunctionValue-20]
	_ = x[MemoryKindBigInt-21]
	_ = x[MemoryKindSimpleCompositeValue-22]
	_ = x[MemoryKindPublishedValue-23]
	_ = x[MemoryKindAtreeArrayDataSlab-24]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-25]
	_ = x[MemoryKindAtreeArrayElementOverhead-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-30]
	_ = x[MemoryKindAtreeEncodedSlab-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindRestrictedStaticType-39]
	_ = x[MemoryKindReferenceStaticType-40]
	_ = x[MemoryKindCapabilityStaticType-41]
	_ = x[MemoryKindFunctionStaticType-42]
	_ = x[MemoryKindCadenceVoidValue-43]
	_ = x[MemoryKindCadenceOptionalValue-44]
	_ = x[MemoryKindCadenceBoolValue-45]
	_ = x[MemoryKindCadenceStringValue-46]
	_ = x[MemoryKindCadenceCharacterValue-47]
	_ = x[MemoryKindCadenceAddressValue-48]
	_ = x[MemoryKindCadenceIntValue-49]
	_ = x[MemoryKindCadenceNumberValue-50]
	_ = x[MemoryKindCadenceArrayValueBase-51]
	_ = x[MemoryKindCadenceArrayValueLength-52]
	_ = x[MemoryKindCadenceDictionaryValue-53]
	_ = x[MemoryKindCadenceKeyValuePair-54]
	_ = x[MemoryKindCadenceStructValueBase-55]
	_ = x[MemoryKindCadenceStructValueSize-56]
	_ = x[MemoryKindCadenceResourceValueBase-57]
	_ = x[MemoryKindCadenceResourceValueSize-58]
	_ = x[MemoryKindCadenceEventValueBase-59]
	_ = x[MemoryKindCadenceEventValueSize-60]
	_ = x[MemoryKindCadenceContractValueBase-61]
	_ = x[MemoryKindCadenceContractValueSize-62]
	_ = x[MemoryKindCadenceEnumValueBase-63]
	_ = x[MemoryKindCadenceEnumValueSize-64]
	_ = x[MemoryKindCadencePathLinkValue-65]
	_ = x[MemoryKindCadencePathValue-66]
	_ = x[MemoryKindCadenceTypeValue-67]
	_ = x[MemoryKindCadenceStorageCapabilityValue-68]
	_ = x[MemoryKindCadenceFunctionValue-69]
	_ = x[MemoryKindCadenceOptionalType-70]
	_ = x[MemoryKindCadenceVariableSizedArrayType-71]
	_ = x[MemoryKindCadenceConstantSizedArrayType-72]
	_ = x[MemoryKindCadenceDictionaryType-73]
	_ = x[MemoryKindCadenceField-74]
	_ = x[MemoryKindCadenceParameter-75]
	_ = x[MemoryKindCadenceStructType-76]
	_ = x[MemoryKindCadenceResourceType-77]
	_ = x[MemoryKindCadenceEventType-78]
	_ = x[MemoryKindCadenceContractType-79]
	_ = x[MemoryKindCadenceStructInterfaceType-80]
	_ = x[MemoryKindCadenceResourceInterfaceType-81]
	_ = x[MemoryKindCadenceContractInterfaceType-82]
	_ = x[MemoryKindCadenceFunctionType-83]
	_ = x[MemoryKindCadenceReferenceType-84]
	_ = x[MemoryKindCadenceRestrictedType-85]
	_ = x[MemoryKindCadenceCapabilityType-86]
	_ = x[MemoryKindCadenceEnumType-87]
	_ = x[MemoryKindRawString-88]
	_ = x[MemoryKindAddressLocation-89]
	_ = x[MemoryKindBytes-90]
	_ = x[MemoryKindVariable-91]
	_ = x[MemoryKindCompositeTypeInfo-92]
	_ = x[MemoryKindCompositeField-93]
	_ = x[MemoryKindInvocation-94]
	_ = x[MemoryKindStorageMap-95]
	_ = x[MemoryKindStorageKey-96]
	_ = x[MemoryKindTypeToken-97]
	_ = x[MemoryKindErrorToken-98]
	_ = x[MemoryKindSpaceToken-99]
	_ = x[MemoryKindProgram-100]
	_ = x[MemoryKindIdentifier-101]
	_ = x[MemoryKindArgument-102]
	_ = x[MemoryKindBlock-103]
	_ = x[MemoryKindFunctionBlock-104]
	_ = x[MemoryKindParameter-105]
	_ = x[MemoryKindParameterList-106]
	_ = x[MemoryKindTypeParameter-107]
	_ = x[MemoryKindTypeParameterList-108]
	_ = x[MemoryKindTransfer-109]
	_ = x[MemoryKindMembers-110]
	_ = x[MemoryKindTypeAnnotation-111]
	_ = x[MemoryKindDictionaryEntry-112]
	_ = x[MemoryKindFunctionDeclaration-113]
	_ = x[MemoryKindCompositeDeclaration-114]
	_ = x[MemoryKindInterfaceDeclaration-115]
	_ = x[MemoryKindEnumCaseDeclaration-116]
	_ = x[MemoryKindFieldDeclaration-117]
	_ = x[MemoryKindTransactionDeclaration-118]
	_ = x[MemoryKindTransactionRoleDeclaration-119]
	_ = x[MemoryKindImportDeclaration-120]
	_ = x[MemoryKindVariableDeclaration-121]
	_ = x[MemoryKindSpecialFunctionDeclaration-122]
	_ = x[MemoryKindPragmaDeclaration-123]
	_ = x[MemoryKindAssignmentStatement-124]
	_ = x[MemoryKindBreakStatement-125]
	_ = x[MemoryKindContinueStatement-126]
	_ = x[MemoryKindEmitStatement-127]
	_ = x[MemoryKindExpressionStatement-128]
	_ = x[MemoryKindForStatement-129]
	_ = x[MemoryKindIfStatement-130]
	_ = x[MemoryKindReturnStatement-131]
	_ = x[MemoryKindSwapStatement-132]
	_ = x[MemoryKindSwitchStatement-133]
	_ = x[MemoryKindWhileStatement-134]
	_ = x[MemoryKindBooleanExpression-135]
	_ = x[MemoryKindVoidExpression-136]
	_ = x[MemoryKindNilExpression-137]
	_ = x[MemoryKindStringExpression-138]
	_ = x[MemoryKindIntegerExpression-139]
	_ = x[MemoryKindFixedPointExpression-140]
	_ = x[MemoryKindArrayExpression-141]
	_ = x[MemoryKindDictionaryExpression-142]
	_ = x[MemoryKindIdentifierExpression-143]
	_ = x[MemoryKindInvocationExpression-144]
	_ = x[MemoryKindMemberExpression-145]
	_ = x[MemoryKindIndexExpression-146]
	_ = x[MemoryKindConditionalExpression-147]
	_ = x[MemoryKindUnaryExpression-148]
	_ = x[MemoryKindBinaryExpression-149]
	_ = x[MemoryKindFunctionExpression-150]
	_ = x[MemoryKindCastingExpression-151]
	_ = x[MemoryKindCreateExpression-152]
	_ = x[MemoryKindDestroyExpression-153]
	_ = x[MemoryKindReferenceExpression-154]
	_ = x[MemoryKindForceExpression-155]
	_ = x[MemoryKindPathExpression-156]
	_ = x[MemoryKindConstantSizedType-157]
	_ = x[MemoryKindDictionaryType-158]
	_ = x[MemoryKindFunctionType-159]
	_ = x[MemoryKindInstantiationType-160]
	_ = x[MemoryKindNominalType-161]
	_ = x[MemoryKindOptionalType-162]
	_ = x[MemoryKindReferenceType-163]
	_ = x[MemoryKindRestrictedType-164]
	_ = x[MemoryKindVariableSizedType-165]
	_ = x[MemoryKindPosition-166]
	_ = x[MemoryKindRange-167]
	_ = x[MemoryKindElaboration-168]
	_ = x[MemoryKindActivation-169]
	_ = x[MemoryKindActivationEntries-170]
	_ = x[MemoryKindVariableSizedSemaType-171]
	_ = x[MemoryKindConstantSizedSemaType-172]
	_ = x[MemoryKindDictionarySemaType-173]
	_ = x[MemoryKindOptionalSemaType-174]
	_ = x[MemoryKindRestrictedSemaType-175]
	_ = x[MemoryKindReferenceSemaType-176]
	_ = x[MemoryKindCapabilitySemaType-177]
	_ = x[MemoryKindOrderedMap-178]
	_ = x[MemoryKindOrderedMapEntryList-179]
	_ = x[MemoryKindOrderedMapEntry-180]
	_ = x[MemoryKindLast-181]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueStorageCapabilityValuePathLinkValueAccountLinkValueStorageReferenceValueAccountReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceResourceValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathLinkValueCadencePathValueCadenceTypeValueCadenceStorageCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationTransactionRoleDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 183, 196, 212, 233, 254, 277, 301, 318, 336, 342, 362, 376, 394, 416, 441, 457, 477, 500, 527, 543, 562, 581, 600, 623, 646, 666, 684, 704, 723, 743, 761, 777, 797, 813, 831, 852, 871, 886, 904, 925, 948, 970, 989, 1011, 1033, 1057, 1081, 1102, 1123, 1147, 1171, 1191, 1211, 1231, 1247, 1263, 1292, 1312, 1331, 1360, 1389, 1410, 1422, 1438, 1455, 1474, 1490, 1509, 1535, 1563, 1591, 1610, 1630, 1651, 1672, 1687, 1696, 1711, 1716, 1724, 1741, 1755, 1765, 1775, 1785, 1794, 1804, 1814, 1821, 1831, 1839, 1844, 1857, 1866, 1879, 1892, 1909, 1917, 1924, 1938, 1953, 1972, 1992, 2012, 2031, 2047, 2069, 2095, 2112, 2131, 2157, 2174, 2193, 2207, 2224, 2237, 2256, 2268, 2279, 2294, 2307, 2322, 2336, 2353, 2367, 2380, 2396, 2413, 2433, 2448, 2468, 2488, 2508, 2524, 2539, 2560, 2575, 2591, 2609, 2626, 2642, 2659, 2678, 2693, 2707, 2724, 2738, 2750, 2767, 2778, 2790, 2803, 2817, 2834, 2842, 2847, 2858, 2868, 2885, 2906, 2927, 2945, 2961, 2979, 2996, 3014, 3024, 3043, 3058, 3062}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
