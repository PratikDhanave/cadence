// Code generated by "stringer -type=ElementType"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ElementTypeUnknown-0]
	_ = x[ElementTypeProgram-1]
	_ = x[ElementTypeBlock-2]
	_ = x[ElementTypeFunctionBlock-3]
	_ = x[ElementTypeFunctionDeclaration-4]
	_ = x[ElementTypeSpecialFunctionDeclaration-5]
	_ = x[ElementTypeCompositeDeclaration-6]
	_ = x[ElementTypeInterfaceDeclaration-7]
	_ = x[ElementTypeFieldDeclaration-8]
	_ = x[ElementTypeEnumCaseDeclaration-9]
	_ = x[ElementTypePragmaDeclaration-10]
	_ = x[ElementTypeImportDeclaration-11]
	_ = x[ElementTypeTransactionDeclaration-12]
	_ = x[ElementTypeTransactionRoleDeclaration-13]
	_ = x[ElementTypeReturnStatement-14]
	_ = x[ElementTypeBreakStatement-15]
	_ = x[ElementTypeContinueStatement-16]
	_ = x[ElementTypeIfStatement-17]
	_ = x[ElementTypeSwitchStatement-18]
	_ = x[ElementTypeWhileStatement-19]
	_ = x[ElementTypeForStatement-20]
	_ = x[ElementTypeEmitStatement-21]
	_ = x[ElementTypeVariableDeclaration-22]
	_ = x[ElementTypeAssignmentStatement-23]
	_ = x[ElementTypeSwapStatement-24]
	_ = x[ElementTypeExpressionStatement-25]
	_ = x[ElementTypeVoidExpression-26]
	_ = x[ElementTypeBoolExpression-27]
	_ = x[ElementTypeNilExpression-28]
	_ = x[ElementTypeIntegerExpression-29]
	_ = x[ElementTypeFixedPointExpression-30]
	_ = x[ElementTypeArrayExpression-31]
	_ = x[ElementTypeDictionaryExpression-32]
	_ = x[ElementTypeIdentifierExpression-33]
	_ = x[ElementTypeInvocationExpression-34]
	_ = x[ElementTypeMemberExpression-35]
	_ = x[ElementTypeIndexExpression-36]
	_ = x[ElementTypeConditionalExpression-37]
	_ = x[ElementTypeUnaryExpression-38]
	_ = x[ElementTypeBinaryExpression-39]
	_ = x[ElementTypeFunctionExpression-40]
	_ = x[ElementTypeStringExpression-41]
	_ = x[ElementTypeCastingExpression-42]
	_ = x[ElementTypeCreateExpression-43]
	_ = x[ElementTypeDestroyExpression-44]
	_ = x[ElementTypeReferenceExpression-45]
	_ = x[ElementTypeForceExpression-46]
	_ = x[ElementTypePathExpression-47]
}

const _ElementType_name = "ElementTypeUnknownElementTypeProgramElementTypeBlockElementTypeFunctionBlockElementTypeFunctionDeclarationElementTypeSpecialFunctionDeclarationElementTypeCompositeDeclarationElementTypeInterfaceDeclarationElementTypeFieldDeclarationElementTypeEnumCaseDeclarationElementTypePragmaDeclarationElementTypeImportDeclarationElementTypeTransactionDeclarationElementTypeTransactionRoleDeclarationElementTypeReturnStatementElementTypeBreakStatementElementTypeContinueStatementElementTypeIfStatementElementTypeSwitchStatementElementTypeWhileStatementElementTypeForStatementElementTypeEmitStatementElementTypeVariableDeclarationElementTypeAssignmentStatementElementTypeSwapStatementElementTypeExpressionStatementElementTypeVoidExpressionElementTypeBoolExpressionElementTypeNilExpressionElementTypeIntegerExpressionElementTypeFixedPointExpressionElementTypeArrayExpressionElementTypeDictionaryExpressionElementTypeIdentifierExpressionElementTypeInvocationExpressionElementTypeMemberExpressionElementTypeIndexExpressionElementTypeConditionalExpressionElementTypeUnaryExpressionElementTypeBinaryExpressionElementTypeFunctionExpressionElementTypeStringExpressionElementTypeCastingExpressionElementTypeCreateExpressionElementTypeDestroyExpressionElementTypeReferenceExpressionElementTypeForceExpressionElementTypePathExpression"

var _ElementType_index = [...]uint16{0, 18, 36, 52, 76, 106, 143, 174, 205, 232, 262, 290, 318, 351, 388, 414, 439, 467, 489, 515, 540, 563, 587, 617, 647, 671, 701, 726, 751, 775, 803, 834, 860, 891, 922, 953, 980, 1006, 1038, 1064, 1091, 1120, 1147, 1175, 1202, 1230, 1260, 1286, 1311}

func (i ElementType) String() string {
	if i >= ElementType(len(_ElementType_index)-1) {
		return "ElementType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ElementType_name[_ElementType_index[i]:_ElementType_index[i+1]]
}
